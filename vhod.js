const { Highrise, Events, Facing, Emotes, GoldBars } = require("highrise.sdk.dev");
// const { GoldBars } = require("highrise.sdk");
const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');

const token = "99aba915d607df074d68df405ef9afd3631d3bd8a4d063004467ba541c2d4388";
const room = "68a5826cc71c2f71395f5e36";
const ownerID = "https://high.rs/room?id=68529363d23340447bc0b10c&invite_id=6878f0cda2765ebef404143f"
//https://high.rs/room?id=68a5826cc71c2f71395f5e36&invite_id=68a5dc6e8e17a1f30575deaf

const bot = new Highrise({
  Events: [Events.Messages, Events.Movements, Events.Leaves, Events.DirectMessages, Events.Joins, Events.Tips],
  AutoFetchMessages: true,
  Cache: true
});

function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
async function delay(time) {
    return new Promise(resolve => setTimeout(resolve, time));
}
const msgs = [
    `\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ\n"–ù–∞–π–¥–∏ –¥—Ä—É–≥–∞" üíóüíç\n–ü—Ä–∞–≤–∏–ª–∞:\n\n\n–ù–µ —Å–ø–∞–º–∏—Ç—å –∏ –Ω–µ —Ñ–ª—É–¥–∏—Ç—å. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç.–¥., –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º.\n–†–µ–∫–ª–∞–º–∞ –ª—é–±–æ–≥–æ –≤–∏–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç, –Ω–æ`,
    `–¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –∏–ª–∏ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –ú—ã —Ü–µ–Ω–∏–º –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏. –ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∏—Ç—å`,
    `–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–º–∏—Ç–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞, –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø—Ä–∞–≤–∏–ª –∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.
    –í—Å—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∑–∞—â–∏—â–µ–Ω–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏`,
    `–ø—Ä–∞–≤–∞–º–∏.
    Copying or imitating the unique design, concept, rules, and any other features of our room without prior written consent is prohibited.
    All content of the room is protected by copyright.`
]

setInterval(async () => {
    await bot.player.emote('68a633049cb92a01a6c5f75e', "dance-hipshake").catch(console.error)
}, 12000)


bot.on('playerJoin', async (user, position) => {
    console.log(user.username)
  for (m of msgs) {
    bot.message.send(`${getRandomNumber(0,20)}\n${m}`) .catch(e => console.error(e))
    await delay(1000)
  }
});

bot.on("whisperCreate", async (user, message) => {
const msg = message.toLowerCase();


    if (user.id !== "67f8078652db7b9f7a0e68fb" && user.id !== "67a2b617a337e1b57da53360") return
    if (msg === '–±–∞–ª–∞–Ω—Å' || msg === '–±–∞–ª') {
        const balance = await bot.wallet.gold.get().catch(console.error)
        bot.whisper.send(user.id, `–±–∞–ª–∞–Ω—Å - ${balance}`).catch(e => console.error(e));
        return
    }
    if (msg === '—Å—Ç–∞—Ä—Ç') {
        if (razdacha.isRunning) return
        razdacha.isRunning = true
        const players = await bot.room.players.get().catch(console.error);
        const playerIDs = players.map(item => item[0].id);
        const totalPlayers = playerIDs.length;
        for (const id of playerIDs) {
            if (id === '6835fa9c903951782e5c18e4') continue
            try {
                await bot.player.react(id, Reactions.Clap).catch(e => console.error(e));
            } catch (error) {
                console.error(error)
            }
        }
        bot.message.send(`\nWhoever drops 10g after the word ‚úÖSTART‚úÖ will receive 20g`).catch(console.error);
        bot.message.send(`\n–ü–µ—Ä–≤—ã–π, –∫—Ç–æ —Å–∫–∏–Ω–µ—Ç 10–≥ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ ‚úÖSTART‚úÖ - –ø–æ–ª—É—á–∏—Ç 20–≥`).catch(console.error);
        await delay(getRandomDelayInRange(5000, 8000))
        if (Math.random() < 0.5) {
            const words = ['‚úÖSTRAT‚úÖ', "‚úÖSTSRT‚úÖ", "‚úÖSTYRT‚úÖ", "‚úÖSPART‚úÖ", "‚úÖSTUPID‚úÖ"]
            const word = getRandomElement(words)
            await bot.message.send(`\n${word}`).catch(console.error);
            await delay(getRandomDelayInRange(5000, 8000))
            if (Math.random() < 0.5) {
                const words = ['‚úÖSTRAT‚úÖ', "‚úÖSTSRT‚úÖ", "‚úÖSTYRT‚úÖ", "‚úÖSPART‚úÖ", "‚úÖSTUPID‚úÖ"]
                const word = getRandomElement(words)
                await bot.message.send(`\n${word}`).catch(console.error);
                await delay(getRandomDelayInRange(5000, 8000))
            }
        }
        await bot.message.send(`\n‚úÖSTART‚úÖ`).catch(console.error);
    }

          const price = extractNumberFromString(msg)
  if (price !== 0) {
    try {
        const balance = await bot.wallet.gold.get().catch(console.error);
        console.log('Current balance:', balance);
        
        if (!balance && balance !== 0) {
            console.error('Failed to get balance');
            return;
        }

        const players = await bot.room.players.get().catch(console.error);
        if (!players || !players.length) {
            console.error('No players found');
            return;
        }

        const playerIDs = players.map(item => item[0].id);
        const totalPlayers = playerIDs.length;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–µ–≤—ã—Ö
        let barType, requiredAmount;
        
        switch(price) {
            case 1:
                barType = GoldBars.BAR_1;
                requiredAmount = totalPlayers * 2;
                break;
            case 5:
                barType = GoldBars.BAR_5;
                requiredAmount = totalPlayers * 6;
                break;
            case 10:
                barType = GoldBars.BAR_10;
                requiredAmount = totalPlayers * 11;
                break;
            default:
                console.error('Invalid price value');
                return;
        }

        if (balance < requiredAmount) {
            await bot.message.send(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞! –ë–∞–ª–∞–Ω—Å: ${balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount}`).catch(console.error);
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–µ–≤—ã—Ö –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
let successCount = 0;
let failedCount = 0;

for (const id of playerIDs) {
        if (user.id === "67f8078652db7b9f7a0e68fb" || user.id === "67a2b617a337e1b57da53360" || user.id === bot.info.user.id) continue
    try {
        await bot.player.tip(id, barType);
        console.log(`Sent tip to ${id}`);
        successCount++;
    } catch (error) {
        console.error(`Failed to tip player ${id}:`, error);
        failedCount++;
    }
}

    } catch (error) {
        console.error('Error in tipping process:', error);
    }
}

 const usData = parseUserAction(message)
    if (usData) {
        const players = await bot.room.players.get().catch(console.error);
        if (!players) return
        const partner = players.find(player => player[0].username === usData.username)
        if (!partner) {
            return
        }
        const id = partner[0].id
        switch(usData.action) {
            case '–∫–∏–∫':
                await bot.player.kick(id).catch(e => console.error(e));
            case '–±–∞–Ω':
                await bot.player.ban(id, 3200).catch(e => console.error(e));
            case '–º–æ–¥–µ—Ä':
                await bot.player.moderator.add(id).catch(e => console.error(e));
            case '–¥–∏–∑':
                await bot.player.designer.add(id).catch(e => console.error(e));
            case '–Ω–µ–º–æ–¥–µ—Ä':
                await bot.player.moderator.remove(id).catch(e => console.error(e));
            case '–Ω–µ–¥–∏–∑':
                await bot.player.designer.remove(id).catch(e => console.error(e));
            case '–≤–æ–π—Å':
                await bot.player.voice.add(id).catch(e => console.error(e));
            case '–Ω–µ–≤–æ–π—Å':
                await bot.player.voice.remove(user.id).catch(e => console.error(e));

        }
        return
    }



});

function parseUserAction(inputString) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    const trimmedInput = inputString.trim();
    const [action, ...rest] = trimmedInput.split(/\s+/);
    
    if (!action || rest.length === 0) {
        return null
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, —É–¥–∞–ª—è–µ–º @ –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const username = rest.join(' ').replace(/^@/, '').trim();

    return { action, username };
}

function extractNumberFromString(inputString) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è
    if (typeof inputString !== 'string' || inputString.trim() === '') return 0;
    
    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "—Ç–∏–ø 123"
    const match = inputString.match(/^—Ç–∏–ø\s(\d+)$/);
    if (!match) return 0;
    
    // –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
    const number = parseInt(match[1], 10);
    return isNaN(number) ? 0 : number;
    
  } catch {
    return 0;
  }
}


// bot.on("playerMove", async (user, position) => {
//     console.log(position)
// })

bot.on('ready', async () => {
  bot.move.walk(16.5, 7.25, 11.5, Facing.FrontRight)
});

bot.login(token, room);